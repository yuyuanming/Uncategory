#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

typedef long long ll;

#define REP(i, n) for (int i(0), _n(n); i<_n; ++i)
#define CL(A, x) memset(A, x, sizeof(A))
#define SZ(A) ((int) A.size())
#define DB(x) cout << #x << " = " << x << endl;

string num[3][60][60][60];
string digits, lowerBound;

class LeftRightDigitsGame2 {
public:
	void clmin(string& ret, string tmp, char digi) {
		if (tmp != "@") {
			tmp = digi + tmp;
			if (ret > tmp) ret = tmp;				
		}
	}
	void crmin(string& ret, string tmp, char digi) {
		if (tmp != "@") {
			tmp = tmp + digi;
			if (ret > tmp) ret = tmp;				
		}
	}
		
	string dp(int t, int i, int p, int q) {
		if (i == 0) {
			if (t == 2) {
				if (digits[i] > lowerBound[p]) return string("")+digits[i];
			} else if (t == 1) {
				if (digits[i] == lowerBound[p]) return string("")+digits[i];
			} else{
				return string("")+digits[i];
			}			
			return string("@");			
		}
		
		string& ret = num[t][i][p][q];
		if (ret != "A") return ret;
		ret = "@";

		string tmp;		
		if (t == 2) {
			if (digits[i] > lowerBound[p]) {
				clmin(ret, dp(0, i-1, p+1, q), digits[i]);
			}
			else if (digits[i] == lowerBound[p]) {
				clmin(ret, dp(2, i-1, p+1, q), digits[i]);
			}
				
			crmin(ret, dp(2, i-1, p, q-1), digits[i]);
			
			if (digits[i] > lowerBound[q]) {
				crmin(ret, dp(1, i-1, p, q-1), digits[i]);
			}			
		}
		else if (t == 1) {
			if (digits[i] == lowerBound[p]) {
				clmin(ret, dp(1, i-1, p+1, q), digits[i]);
			}		
			if (digits[i] == lowerBound[q]) {
				crmin(ret, dp(1, i-1, p, q-1), digits[i]);
			}
		}
		else {
			clmin(ret, dp(0, i-1, p+1, q), digits[i]);		
			crmin(ret, dp(0, i-1, p, q-1), digits[i]);
		}
		
		return ret;
	}
	
    string minNumber( string _digits, string _lowerBound ) {
		digits = _digits; lowerBound = _lowerBound;
		
		REP(t, 3) REP(i, 51) REP(j, 51) REP(k, 51) num[t][i][j][k] = "A";
		
		string ret = dp(1, SZ(digits)-1, 0, SZ(lowerBound)-1);
		string tmp = dp(2, SZ(digits)-1, 0, SZ(lowerBound)-1);
		if (ret > tmp) ret = tmp;
		
		if (ret == "@") ret = "";
		return ret;
    }
};



// Powered by FileEdit
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	LeftRightDigitsGame2 *obj;
	string answer;
	obj = new LeftRightDigitsGame2();
	clock_t startTime = clock();
	answer = obj->minNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "565";
	p1 = "556";
	p2 = "556";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "565";
	p1 = "566";
	p2 = "655";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "565";
	p1 = "656";
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "9876543210";
	p1 = "5565565565";
	p2 = "5678943210";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "8016352";
	p1 = "1000000";
	p2 = "1086352";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING// Powered by moj 4.16 [modified TZTester]
// Powered by CodeProcessor
