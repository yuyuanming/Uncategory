#include <algorithm>
#include <cmath>
#include <cstdio>
#include <ctime>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <vector>

using namespace std;

#define REP(i, n) for (int i(0), _n(n); i!=_n; ++i)
#define CL(v, x) memset(v, x, sizeof(v))
#define SZ(v) (int)(v).size()

typedef long long ll;

ll dp(ll now, int flag, ll up) {
	if (now > up) return 0;
	
	ll ret = dp(now * 10 + 4, flag, up) + dp(now * 10 + 7, flag, up) + 1;
	
	if (flag == 0) {
		for (int k=1; k<=9; ++k) 
			if ((k != 4) && (k != 7))
				ret += dp(now * 10 + k, 1, up);
		if (now != 0) ret += dp(now * 10, 1, up);
	}
	
	return ret;
}


class TheAlmostLuckyNumbersDivOne {
public:
	long long find(long long a, long long b) {
		return dp(0, 0, b) - dp(0, 0, a - 1);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheAlmostLuckyNumbersDivOne *obj;
	long long answer;
	obj = new TheAlmostLuckyNumbersDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 4ll;
	p1 = 7ll;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 8ll;
	p1 = 19ll;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 28ll;
	p1 = 33ll;
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 12345678900ll;
	p1 = 98765432100ll;
	p2 = 91136ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
