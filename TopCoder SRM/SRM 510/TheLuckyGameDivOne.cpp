#include <algorithm>
#include <cmath>
#include <cstdio>
#include <ctime>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <vector>

using namespace std;

#define REP(i, n) for (int i(0), _n(n); i!=_n; ++i)
#define CL(v, x) memset(v, x, sizeof(v))
#define SZ(v) (int)(v).size()

typedef long long ll;

vector<ll> lucky;
vector<ll> interval;
bool isLucky[10000];
int sum[10000];

ll len;

void dp(ll a, ll b, ll now) {
	if (now > b) return;
	
	if (now >= a) lucky.push_back(now);
	dp(a, b, now * 10 + 4);
	dp(a, b, now * 10 + 7);
}

int calc(int x, int y) {
	int ret = SZ(interval);
	for (int i=x; i<y; ++i) {
		ll b = interval[i] + len - 1;
		vector<ll>::iterator up = lower_bound(interval.begin(), interval.end(), b);
		int j = (int)(up - interval.begin());
		if (up != interval.end()) ++j;
		ret = min(ret, sum[j] - sum[i]);
	}
	return ret;
}

class TheLuckyGameDivOne {
public:
	int find(long long a, long long b, long long jLen, long long bLen) {
		len = bLen;
		lucky.clear();
		dp(a, b, 0);		
		
		CL(isLucky, 0);
		interval.clear();
		sort(lucky.begin(), lucky.end());
		REP(i, SZ(lucky)) {
			interval.push_back(lucky[i] - 1);
			interval.push_back(lucky[i]); isLucky[SZ(interval) - 1] = 1;
			interval.push_back(lucky[i] + 1);
		}
		sum[0] = 0;
		REP(i, SZ(interval) + 1) sum[i + 1] = sum[i] + isLucky[i];
		
		int ret = 0;
		REP(i, SZ(interval)) {
			ll left = interval[i];
			ll right = left + jLen - 1;
			
			int j = i;
			while ((j<SZ(interval)) && (interval[j] + bLen - 1 <= right)) ++j;
			int now = calc(i, j);
			
			right = interval[i];
			left = right - jLen + 1;
			j = i;
			int k = 0;
			while ((j>0) && (interval[j] >= left)) {
				if (interval[j] + bLen - 1 <= right) k = max(k, j);
				--j;
			}
			j += 1;
						
			now = min(now, calc(j, k + 1));
			
			ret = max(ret, now);
		}
		
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheLuckyGameDivOne *obj;
	int answer;
	obj = new TheLuckyGameDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 10ll;
	p2 = 2ll;
	p3 = 1ll;
	p4 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 100ll;
	p4 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4ll;
	p1 = 8ll;
	p2 = 3ll;
	p3 = 2ll;
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1ll;
	p1 = 100ll;
	p2 = 75ll;
	p3 = 50ll;
	p4 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
