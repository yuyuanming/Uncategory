#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define REP(i, n) for (int i(0), _n(n); i!=_n; ++i)
#define CL(v, x) memset(v, x, sizeof(v))
#define SZ(v) (int)(v).size()

typedef long long ll;
ll C[100][100];
ll dp[30][30][60], dp2[30][30][60];

const int MOD =  1000000007;

class CubeBuilding {
public:
	int N;
	
	ll get_dp2(int n, int r, int other) {
		if ( (n == 1) || (r == 0) ) return (other == 0);
		
		ll &ret = dp2[n][r][other];
		if (ret >= 0) return ret;
		ret = 0;
		
		for (int x = 1; x <= min(n, r); ++x) for (int y = 0; y <= min(other, n - x); ++y) {
			ll tmp = (get_dp2(x + y, r - x, other - y) * C[n][x + y] ) % MOD;
			tmp = tmp * C[x + y - 1][x - 1];
			ret = ( ret + tmp ) % MOD;
		}
			
		return ret;
	}

	ll get_dp(int n, int r, int other) {
		if (n == 0) return ( (r == 0) && (other == 0) );
		
		ll &ret = dp[n][r][other];
		if (ret >= 0) return ret;
		
		ret = 0;
		REP(x, r + 1) REP(y, other + 1) ret = ( ret + get_dp(n - 1, r - x, other - y) * get_dp2(N, x, y) ) % MOD;
		return ret;
	}

	int getCount(int R, int G, int B, int _N) {
		REP(i, 100) REP(j, 100) C[i][j] = ( j == 0 ) ? 1 : ( C[i - 1][j] + C[i - 1][j - 1] ) % MOD;
		N = _N, CL(dp, -1), CL(dp2, -1);
		
		ll ret = 0;		
		ret = ( ret + get_dp(N, R, G + B) * C[G + B][G] ) % MOD;
		ret = ( ret + get_dp(N, G, B + R) * C[B + R][B] ) % MOD;
		ret = ( ret + get_dp(N, B, R + G) * C[R + G][R] ) % MOD;
		return (int) ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	CubeBuilding *obj;
	int answer;
	obj = new CubeBuilding();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 0;
	p2 = 1;
	p3 = 2;
	p4 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = 1;
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 3;
	p4 = 162;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 0;
	p1 = 0;
	p2 = 10;
	p3 = 12;
	p4 = 372185933;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof! 
